// Auto-generated from manual_observe.html.
// DO NOT EDIT.

library manual_watching;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'dart:html';
import 'package:web_ui/web_ui.dart';


// Original code


final __changes = new __observe.Observable();

String __$msg;
String get msg {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'msg');
  }
  return __$msg;
}
set msg(String value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'msg',
        __$msg, value);
  }
  __$msg = value;
}

updateMsg() {
  msg = new DateTime.now().toString();
}

main() {
  observe(() => msg, (_) {
    query('#msg').text = msg;
  });
}
// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.document.body;
  var __e0;
  var __t = new autogenerated.Template(__root);
  __e0 = __root.nodes[3].nodes[0];
  __t.listen(__e0.onClick, ($event) { updateMsg(); });
  __t.create();
  __t.insert();
}

//@ sourceMappingURL=manual_observe.dart.map