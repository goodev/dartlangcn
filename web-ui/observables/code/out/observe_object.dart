// Auto-generated from observe_object.html.
// DO NOT EDIT.

library observe_object;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'package:web_ui/web_ui.dart';


// Original code


@observable
class Person extends Observable  {
  String __$name;
  String get name {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'name');
    }
    return __$name;
  }
  set name(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'name',
          __$name, value);
    }
    __$name = value;
  }
  
  Person(name) : __$name = name;
}

final Person person = new Person('Bob');

const List<String> names = const <String>['Sally', 'Alice', 'Steph'];

int _nextCounter = 0;

String get nextName => names[_nextCounter++ % names.length];

newName() {
  person.name = nextName;
}

main() {}
// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.document.body;
  var __e1, __e2;
  var __t = new autogenerated.Template(__root);
  __e1 = __root.nodes[1];
  var __binding0 = __t.contentBind(() => person.name, false);
  __e1.nodes.addAll([new autogenerated.Text('Hello '),
      __binding0,
      new autogenerated.Text('!')]);
  __e2 = __root.nodes[3].nodes[0];
  __t.listen(__e2.onClick, ($event) { newName(); });
  __t.create();
  __t.insert();
}

//@ sourceMappingURL=observe_object.dart.map